{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNBQ/g3htPijlzHMiCyIw9/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1. What is a RESTful API?\n","\n","A RESTful API (Representational State Transfer) is a type of web API that conforms to the principles of REST architecture. REST uses standard HTTP methods (like GET, POST, PUT, DELETE) to perform operations on resources, which are typically represented in JSON format. Each resource is identified by a URI (Uniform Resource Identifier). RESTful APIs are stateless, meaning each request from the client to the server must contain all the information the server needs to understand and respond to the request.\n","\n","2. Explain the concept of API specification\n","\n","An API specification is a detailed document that outlines how an API behaves and how developers should use it. It includes information such as endpoints, request/response formats, parameters, authentication methods, and status codes. Tools like OpenAPI (formerly Swagger) are commonly used to write and share API specs. These specs help ensure consistency, facilitate collaboration between frontend and backend developers, and can be used to auto-generate documentation and client SDKs.\n","\n","3. What is Flask, and why is it popular for building APIs?\n","\n","Flask is a lightweight, micro web framework written in Python. It is popular for building APIs because of its simplicity, flexibility, and minimal boilerplate. It doesn't force any particular project layout or dependencies, which makes it easy to learn and quick to start. Flask is also highly extensible, allowing developers to add only what they need using extensions such as Flask-SQLAlchemy, Flask-RESTful, or Flask-JWT.\n","\n","4. What is routing in Flask?\n","\n","Routing in Flask is the process of defining URLs and associating them with functions that handle those URLs. Each route maps a specific URL pattern to a view function. When a client sends a request to a particular URL, Flask matches the URL to a route and calls the associated function to handle the request.\n","\n","5. How do you create a simple Flask application?\n","\n","You can create a simple Flask app like this:"],"metadata":{"id":"CKSxmGDbVPzV"}},{"cell_type":"code","source":["from flask import Flask\n","\n","app = Flask(__name__)\n","\n","@app.route('/')\n","def home():\n","    return 'Hello, World!'\n","\n","if __name__ == '__main__':\n","    app.run(debug=True)\n"],"metadata":{"id":"5BoleHkzVS_m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["6. What are HTTP methods used in RESTful APIs?\n","\n","Common HTTP methods in RESTful APIs include:\n","\n","GET: Retrieve data from the server.\n","\n","POST: Create a new resource.\n","\n","PUT: Update an existing resource.\n","\n","PATCH: Partially update an existing resource.\n","\n","DELETE: Remove a resource.\n","\n","Each method corresponds to a specific CRUD operation.\n","\n","7. What is the purpose of the @app.route() decorator in Flask?\n","\n","The @app.route() decorator is used to define routes in Flask. It tells Flask what URL should trigger a specific function. For example, @app.route('/hello') maps the /hello URL to a function, so when a user visits /hello, that function runs.\n","\n","8. What is the difference between GET and POST HTTP methods?\n","\n","GET: Used to request data from the server. It should not have side effects (i.e., it shouldn't modify data).\n","\n","POST: Used to send data to the server to create a new resource. It usually includes a request body (like JSON or form data).\n","\n","GET requests can be cached and bookmarked, while POST requests cannot.\n","\n","9. How do you handle errors in Flask APIs?\n","\n","You can handle errors in Flask using error handlers:\n","\n","@app.errorhandler(404)\n","def not_found(error):\n","    return {'error': 'Not Found'}, 404\n","\n","\n","Flask also allows raising exceptions like abort(400) to return HTTP errors. You can also use custom error messages and status codes in your responses.\n","\n","10. How do you connect Flask to a SQL database?\n","\n","You can connect Flask to a SQL database using extensions like Flask-SQLAlchemy. Here's a basic setup:"],"metadata":{"id":"tiYn1r3AVYbN"}},{"cell_type":"code","source":["from flask_sqlalchemy import SQLAlchemy\n","\n","app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mydb.sqlite3'\n","db = SQLAlchemy(app)\n"],"metadata":{"id":"uakND4WwVf7z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["11. What is the role of Flask-SQLAlchemy?\n","\n","Flask-SQLAlchemy is an extension that integrates SQLAlchemy with Flask. It simplifies database interactions by allowing you to define models as Python classes and interact with the database using Python code instead of raw SQL.\n","\n","12. What are Flask blueprints, and how are they useful?\n","\n","Blueprints allow you to organize your Flask app into modular components. Instead of defining all routes in a single file, you can group related routes into separate files or modules. This is especially useful for large applications with many endpoints.\n","\n","13. What is the purpose of Flask's request object?\n","\n","The request object in Flask holds data sent by the client in an HTTP request. It allows you to access:\n","\n","Query parameters: request.args\n","\n","Form data: request.form\n","\n","JSON data: request.get_json()\n","\n","Headers: request.headers\n","\n","14. How do you create a RESTful API endpoint using Flask?\n","\n","Example of a simple RESTful endpoint:"],"metadata":{"id":"AbPfPdTxViYZ"}},{"cell_type":"code","source":["from flask import Flask, request, jsonify\n","\n","@app.route('/users', methods=['POST'])\n","def create_user():\n","    data = request.get_json()\n","    return jsonify(data), 201\n"],"metadata":{"id":"T_kAUqBXVnZ7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["15. What is the purpose of Flask's jsonify() function?\n","\n","jsonify() converts Python dictionaries or lists into JSON responses. It automatically sets the correct Content-Type header to application/json."],"metadata":{"id":"ZzricsqeVqGN"}},{"cell_type":"code","source":["return jsonify({\"message\": \"Success\"})\n"],"metadata":{"id":"8WxvP3FGVuwA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["16. Explain Flask’s url_for() function\n","\n","url_for() generates URLs for your Flask app based on the name of a view function. This makes your app more maintainable since you don’t hard-code URLs."],"metadata":{"id":"mM4g2hF3Vyz3"}},{"cell_type":"code","source":["url_for('home')  # returns '/'\n"],"metadata":{"id":"vTJd8qFAWGkP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7. How does Flask handle static files (CSS, JavaScript, etc.)?\n","\n","Flask automatically serves static files from the static folder in your project directory. You can access them in HTML using:"],"metadata":{"id":"W09SGu3mWJC7"}},{"cell_type":"code","source":["<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n"],"metadata":{"id":"tLC2W5fKWMjE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["18. What is an API specification, and how does it help in building a Flask API?\n","\n","As mentioned earlier, an API specification is a blueprint for how an API should behave. In Flask, you can use tools like OpenAPI to define your spec. It helps developers:\n","\n","Know what endpoints exist\n","\n","Understand expected input/output\n","\n","Validate requests/responses\n","\n","Generate documentation automatically\n","\n","19. What are HTTP status codes, and why are they important in a Flask API?\n","\n","HTTP status codes indicate the result of an HTTP request. They help clients understand what happened:\n","\n","200 OK: Success\n","\n","201 Created: Resource created\n","\n","400 Bad Request: Invalid input\n","\n","404 Not Found: Resource doesn't exist\n","\n","500 Internal Server Error: Something went wrong on the server\n","\n","Using the correct status codes improves the clarity and reliability of your API.\n","\n","20. How do you handle POST requests in Flask?\n","\n","Handling a POST request:"],"metadata":{"id":"JMfqP8o3WRGL"}},{"cell_type":"code","source":["@app.route('/data', methods=['POST'])\n","def handle_post():\n","    data = request.get_json()\n","    return jsonify({\"received\": data}), 200\n"],"metadata":{"id":"36sm58DIWTSb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["21. How would you secure a Flask API?\n","\n","Securing a Flask API involves:\n","\n","Authentication (e.g., JWT tokens)\n","\n","Authorization (restricting access to certain endpoints)\n","\n","Input validation (to prevent injection attacks)\n","\n","HTTPS (for encrypted communication)\n","\n","Rate limiting (to prevent abuse)\n","\n","Using security headers and proper error handling\n","\n","You can use extensions like Flask-JWT-Extended for token-based security.\n","\n","22. What is the significance of the Flask-RESTful extension?\n","\n","Flask-RESTful is an extension that adds support for quickly building REST APIs. It simplifies route creation, request parsing, and response formatting using class-based views.\n","\n","Example:"],"metadata":{"id":"0jIpd_WUWYqu"}},{"cell_type":"code","source":["from flask_restful import Resource\n","\n","class Hello(Resource):\n","    def get(self):\n","        return {'message': 'Hello'}\n","\n","api.add_resource(Hello, '/hello')\n"],"metadata":{"id":"lEIe0EsIWZph"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["23. What is the role of Flask’s session object?\n","\n","Flask's session object is used to store data across requests for a particular user. It allows you to maintain state, such as login status or user preferences. Session data is stored client-side in a secure cookie that Flask signs with a secret key to prevent tampering"],"metadata":{"id":"3nhRiDo0Whf3"}},{"cell_type":"code","source":["session['user_id'] = 123\n"],"metadata":{"id":"DWKVzTR9WlHn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["1. Create a basic Flask application\n","\n","from flask import Flask\n","\n","app = Flask(__name__)\n","\n","@app.route('/')\n","def home():\n","    return 'Hello, Flask!'\n","\n","if __name__ == '__main__':\n","    app.run(debug=True)\n","\n"," 2. Serve static files (CSS, JS, images)\n","\n","Place files in the static/ folder.\n","\n","Example HTML:\n","\n","<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n","<img src=\"{{ url_for('static', filename='logo.png') }}\">\n","\n"," 3. Define routes with different HTTP methods\n","@app.route('/submit', methods=['GET', 'POST'])\n","def submit():\n","    if request.method == 'POST':\n","        return 'Form submitted!'\n","    return 'Submit form here.'\n","\n"," 4. Render HTML templates\n","from flask import render_template\n","\n","@app.route('/')\n","def index():\n","    return render_template('index.html')  # Template in templates/index.html\n","\n","5. Generate URLs using url_for\n","@app.route('/profile/<username>')\n","def profile(username):\n","    return f\"User: {username}\"\n","\n","# In a template or Python code:\n","url_for('profile', username='alice')\n","\n"," 6. Handle forms\n","from flask import request\n","\n","@app.route('/login', methods=['POST'])\n","def login():\n","    username = request.form['username']\n","    return f\"Logged in as {username}\"\n","\n","\n","HTML Form:\n","\n","<form action=\"/login\" method=\"post\">\n","  <input name=\"username\">\n","  <input type=\"submit\">\n","</form>\n","\n"," 7. Validate form data\n","@app.route('/register', methods=['POST'])\n","def register():\n","    username = request.form.get('username')\n","    if not username:\n","        return \"Username is required!\", 400\n","    return f\"Registered {username}\"\n","\n"," 8. Manage sessions\n","from flask import session\n","\n","app.secret_key = 'your_secret_key'\n","\n","@app.route('/set/')\n","def set_session():\n","    session['user'] = 'Alice'\n","    return 'Session set.'\n","\n","@app.route('/get/')\n","def get_session():\n","    return session.get('user', 'Not logged in')\n","\n"," 9. Redirect to a different route\n","from flask import redirect\n","\n","@app.route('/go-home')\n","def go_home():\n","    return redirect(url_for('home'))\n","\n","10. Handle errors (e.g., 404)\n","@app.errorhandler(404)\n","def not_found(e):\n","    return render_template('404.html'), 404\n","\n"," 11. Structure app using Blueprints\n","# In user_routes.py\n","from flask import Blueprint\n","\n","user_bp = Blueprint('user', __name__)\n","\n","@user_bp.route('/profile')\n","def profile():\n","    return \"User Profile\"\n","\n","# In main app\n","from user_routes import user_bp\n","\n","app.register_blueprint(user_bp, url_prefix='/user')\n","\n"," 12. Define a custom Jinja filter\n","@app.template_filter('capitalize')\n","def capitalize_filter(s):\n","    return s.capitalize()\n","\n","# In template: {{ \"hello\" | capitalize }}\n","\n"," 13. Redirect with query parameters\n","@app.route('/search')\n","def search():\n","    return redirect(url_for('results', q='flask'))\n","\n","@app.route('/results')\n","def results():\n","    query = request.args.get('q')\n","    return f\"Results for: {query}\"\n","\n"," 14. Return JSON responses\n","from flask import jsonify\n","\n","@app.route('/api/data')\n","def data():\n","    return jsonify({'name': 'Alice', 'age': 30})\n","\n"," 15. Capture URL parameters\n","@app.route('/post/<int:post_id>')\n","def post(post_id):\n","    return f\"Post ID is {post_id}\""],"metadata":{"id":"9Va8KIwRXA1c"},"execution_count":null,"outputs":[]}]}